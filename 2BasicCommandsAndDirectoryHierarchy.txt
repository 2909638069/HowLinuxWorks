This chapter is a guide to the Unix commands and utilities.
Why Unix commands? Linux is a Unix flavor at heart.

2.1 The Bourne Shell: /bin/sh
A shell is a program that runs commands, and it also serves as a small programming environment.
Shell scripts are text files that contain a sequence of shell commands.
The bash shell is the default shell on most Linux distributions.

2.2.1 The Shell Window
A single $ denotes the shell prompt. A single # denotes that you should run as the superuser (root).

2.2.2 cat
  $ cat file1 file2 ...
cat (concatenate) prints the contents of file1, file2, and any other files, and then exits.

2.2.3 Standard Input and Standard output (I/O)
Unix processes use I/O streams to read and write data. Streams are very flexible.
One of the best features of stadard streams is that they can easily be manipulated to read and
write to places other than the terminal.

2.3 Basic Commands

2.3.1 ls
The ls command lists the contents of a directory. The default is the current directory.
Use ls -l for a detailed (long) listing.

2.3.2 cp
The cp command copies files.
  $ cp file1 file2
  $ cp file1 file2 ... fileN dir

2.3.3 mv
The mv commands move files.
  $ mv file1 file2
  $ mv file1 file2 ... fileN dir

2.3.4 touch
The touch command creates a file. If the file already exists, touch updates the file's
modification time stamp.

2.3.5 rm
To remove a file, use rm.

2.3.6 echo
The echo command prints its arguments to the standard output.

2.4 Navigating Directories
Unix has a directory hierarchy that starts at /, called the root directory.
The directory separator is the slash (/).
When you refer to a file or directory, you specify a path or pathname.
When a path starts with /, it is a full or absolute path.
Two dots (..) refers to the parent of a directory. One dot (.) refers to the current directory.
A path not beginning with / is called a relative path.

2.4.1 cd
  $ cd dir
cd is short for change directory.

2.4.2 mkdir

2.4.3 rmdir

2.4.4 Shell Globbing (Wildcards)
The shell can match simple patterns to file and directory names, a process known as globbing.
The simplest of these is the glob character *,
  a. * which tells the shell to match any number of arbitrary characters.
  b. at* expands to all filenames that start with at.
  c. *at expands to all filenames that end with at.
  d. *at* expands to all filenames that contain at.

Another shell glob charactoer, the question mark (?), instructs the shell to match exactly one
arbitrary character. For example, b?at matches boat and brat.

If you don't want the shell to expand a glob in a command, enclose the glob in single quotes('').

2.5 Intermediate Commands
The following sections describe the most essential intermediate Unix commands.

2.5.1 grep
The grep command prints the lines from a file or input stream that match an expression.
For example, to print the lines in the /etc/passwd file that contains the text root, enter this:
  $ grep root /etc/passwd

The grep command is extraordinarily handy when operating on multiple files at once because it prints the
filename in addition to the matching line.

Two of the most important grep options are -i (for case-insensitive matches) and -v (which inverts the
search, that is, prints all lines that don't match).

grep understands patterns known as regular expressions. Regular expressions are more powerful than
wildcard-style patterns, and they have a different syntax.

2.5.2 less

